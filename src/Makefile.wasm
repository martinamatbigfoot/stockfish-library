# Stockfish WebAssembly Makefile

# Emscripten compiler
CXX = em++

# Source files
SRCS = stockfish_wasm.cpp \
	benchmark.cpp bitboard.cpp evaluate.cpp \
	misc.cpp movegen.cpp movepick.cpp position.cpp \
	search.cpp thread.cpp timeman.cpp tt.cpp uci.cpp ucioption.cpp tune.cpp syzygy/tbprobe.cpp \
	nnue/nnue_misc.cpp nnue/features/half_ka_v2_hm.cpp nnue/network.cpp engine.cpp score.cpp memory.cpp
	

# Object files
OBJS = $(SRCS:.cpp=.o)

# Compiler flags
CXXFLAGS = -O3 -DNDEBUG -std=c++17 \
	-DIS_64BIT -DNO_PEXT \
	-DUSE_PTHREADS \
	-DNNUE_EMBEDDING_OFF \
	-DUSE_POPCNT \
	-DNO_PREFETCH \
	-I. -Isrc \
	-pthread \
	-s USE_PTHREADS=1 \
	-s PTHREAD_POOL_SIZE=1 \
	-s TOTAL_MEMORY=67108864 \
	-s WASM=1 \
	-s ALLOW_MEMORY_GROWTH=1 \
	-s EXPORTED_RUNTIME_METHODS=['ccall','cwrap'] \
	-s EXPORTED_FUNCTIONS=['_malloc','_free'] \
	-s MODULARIZE=1 \
	-s EXPORT_NAME='StockfishEngine' \
	--bind

# Linker flags
LDFLAGS = $(CXXFLAGS)

# Output
TARGET = stockfish.js

all: $(TARGET)

$(TARGET): $(OBJS)
	$(CXX) $(OBJS) -o $(TARGET) $(LDFLAGS)

%.o: %.cpp
	$(CXX) $(CXXFLAGS) -c $< -o $@

clean:
	rm -f $(OBJS) $(TARGET) $(TARGET).wasm

.PHONY: all clean
